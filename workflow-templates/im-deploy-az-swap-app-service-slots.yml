# Workflow Code: IrritatedHyena_v2    DO NOT REMOVE

# Prerequisites
# 1 - Make sure the az secrets have been added to the environments

name: Swap Azure App Service Slots

# This workflow can be kicked off manually and it can also be kicked off automatically from
# another workflow by using the repository_dispatch event trigger.  This workflow is designed
# to know about each of your environments, so the only thing you need to input is the
# environment where slots will be toggled.

on:
  workflow_dispatch:
    inputs:
      environment:
        description: The environment where slots are being swapped - dev|qa|stage|prod|demo|uat
        required: true
      open-pagerduty-window:
        description: Flag indicating whether a pagerduty maintenance window should be opened
        required: true
        default: 'false'
  # When using repository dispatch, the payload must have an environment property and an open-pagerduty-window property
  repository_dispatch:
    types: [swap_slots]

jobs:
  set-vars:
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners

    # To use any of these outputs in another job use the following syntax: ${{ needs.set-vars.outputs.RESOURCE_GROUP }}
    outputs:
      ENVIRONMENT: ${{ steps.clean-env.outputs.mapped_input }}
      RESOURCE_GROUP: ${{ steps.rgrp.outputs.RESOURCE_GROUP }}
      AZ_APP_NAME: ${{ steps.stg-acct.outputs.AZ_APP_NAME }}
      OPEN_WINDOW: ${{ steps.get-inputs-from-trigger.OPEN_WINDOW }}

    steps:
      - id: get-inputs-from-trigger
        run: |
          eventName=${{ github.event_name }}
          if [ "$eventName" == "workflow_dispatch" ]; then
            echo "ENV_INPUT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
            echo "OPEN_WINDOW=${{ github.event.inputs.open-pagerduty-window }}" >> $GITHUB_ENV
          elif [ "$eventName" == "repository_dispatch" ]; then
            echo "ENV_INPUT=${{ github.event.client_payload.environment }}" >> $GITHUB_ENV
            echo "OPEN_WINDOW=${{ github.event.client_payload.open-pagerduty-window }}" >> $GITHUB_ENV
          fi

      - name: Set ENVIRONMENT
        id: clean-env
        uses: im-open/map-input-action@v1.0.1
        with:
          input: ${{ steps.get-inputs-from-trigger.outputs.ENV_INPUT }}
          # TODO:  Update for the environments your project contains
          # The value array contains the environments it will match and the corresponding key is
          # the environment it will output if one of the values was found.  It is case insensitive.
          input_map: |
            { 
              "dev": ["dev", "d", "development"], 
              "qa": ["qa", "q"], 
              "stage": ["stg", "s", "stage"], 
              "demo": ["o", "demo"], 
              "uat": ["u", "uat"], 
              "prod": ["prod", "production", "p"] 
            }
          error_on_no_match: true
          custom_error_message: 'The environment must be Dev, QA, Stage Demo, UAT or Prod'

      - run: echo "The current environment is ${{ steps.clean-env.outputs.mapped_input }}"

      # This variable is used to upload and download blobs from blob storage
      - name: Set RESOURCE_GROUP
        uses: im-open/set-variable-based-on-environment@v1.0.0
        id: rgrp
        with:
          variable-name: 'RESOURCE_GROUP'
          current-environment: ${{ steps.clean-env.outputs.mapped_input }}
          # TODO: For the following resource group inputs, fill in the value if you have the environment and delete the environment if it does not exist
          dev-value: ''
          qa-value: ''
          stage-value: ''
          demo-value: ''
          uat-value: ''
          prod-value: ''

      - uses: im-open/set-variable-based-on-environment@v1.0.0
        with:
          variable-name: 'AZ_APP_NAME'
          current-environment: ${{ steps.clean-env.outputs.mapped_input }}
          # TODO: For the following app name inputs, fill in the value if you have the environment and delete the environment if it does not exist
          dev-value: ''
          qa-value: ''
          stage-value: ''
          demo-value: ''
          uat-value: ''
          prod-value: ''

  swap-slots:
    runs-on: [self-hosted, ubuntu-20.04]
    needs: [set-vars]
    environment: ${{ needs.set-vars.outputs.ENVIRONMENT }}
    env:
      ENVIRONMENT: ${{ needs.set-vars.outputs.ENVIRONMENT }}
      RESOURCE_GROUP: ${{ needs.set-vars.outputs.RESOURCE_GROUP }}
      AZ_APP_NAME: ${{ needs.set-vars.outputs.AZ_APP_NAME }}
      OPEN_WINDOW: ${{ needs.set-vars.outputs.OPEN_WINDOW }}
      PAGERDUTY_WINDOW_IN_MIN: 30 # TODO:  Verify the length of your PD Maintenance Window
      PAGERDUTY_WINDOW_DESC: 'Deploying Code to ${{ needs.set-vars.outputs.ENVIRONMENT }} from GitHub Actions' # TODO:  Verify this PD Maintenance Window Description
      TARGET_SLOT: 'Production' # TODO:  Verify that this is correct.  This is the name azure uses by default.  If you are using a different slot for your main site, update it here
      SOURCE_SLOT: '' # TODO:  Add the name of the source slot

    steps:
      - run: echo "The current environment is ${{ env.ENVIRONMENT }}"

      - name: Open a PagerDuty Maintenance Window
        if: env.OPEN_WINDOW == 'true'
        id: open-window
        uses: im-open/open-pagerduty-maintenance-window@v1.0.1
        with:
          pagerduty-api-key: ${{ secrets.PAGERDUTY_API_KEY }} # This is an org level secret
          description: '${{ env.PAGERDUTY_WINDOW_DESC }}'
          minutes: ${{ env.PAGERDUTY_WINDOW_IN_MIN }}
          service-id: ${{ secrets.PAGERDUTY_SERVICE_ID }} # TODO: make sure this secret has been populated in your repository

      - name: AZ Login
        id: login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Swap
        run: |
          az webapp deployment slot swap \
          --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.AZ_APP_NAME }}  \
          --slot ${{ env.SOURCE_SLOT }} \
          --target-slot ${{ env.TARGET_SLOT }}

      # TODO:  Uncomment if you want to destroy the slot after swap.  Delete if you don't.
      # - run: |
      #     az webapp deployment slot delete \
      #     --slot ${{ env.SOURCE_SLOT }} \
      #     --name ${{ env.AZ_APP_NAME }}  \
      #     --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }} \
      #     --resource-group ${{ env.RESOURCE_GROUP }}

      - name: Azure logout
        if: always() && steps.login.outcome == 'success'
        run: |
          az logout
          az cache purge
          az account clear

      - name: Close the PagerDuty Maintenance Window
        if: always() && env.OPEN_WINDOW == 'true' && steps.open-window.outcome == 'success'
        uses: im-open/close-pagerduty-maintenance-window@v1.0.0
        with:
          pagerduty-api-key: ${{ secrets.PAGERDUTY_API_KEY }} # This is an org level secret
          maintenance-window-id: ${{ steps.open-window.outputs.maintenance-window-id }}
