# Workflow Code: NeedyPig_v1    DO NOT REMOVE

name: Runbook - Start, stop or restart azure app service
#TODO:  You may wish to add the name of the app service to the name above and the file name if there are multiple app services within the repository

on:
  workflow_dispatch:
    inputs:
      action:
        description: The action that should be taken - start|stop|restart.
        required: true
        default: restart
      environment:
        description: The environment the service is in - dev|qa|stage|prod|demo|uat
        required: true
        default: prod

jobs:
  set-vars:
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners

    # To use any of these outputs in another job use the following syntax: ${{ env.RESOURCE_GROUP }}
    outputs:
      ENVIRONMENT: ${{ steps.clean-env.outputs.mapped_input }}
      RESOURCE_GROUP: ${{ steps.rgrp.outputs.RESOURCE_GROUP }}
      APP_SERVICE_NAME: ${{ steps.stg-acct.outputs.APP_SERVICE_NAME }}
      SLOT_NAME: ${{ steps.stg-acct.outputs.SLOT_NAME }}

    steps:
      - name: Set ENVIRONMENT
        id: clean-env
        uses: im-open/map-input-action@v1.0.1
        with:
          input: ${{ github.event.inputs.environment }}
          # TODO:  Update for the environments your project contains
          # The value array contains the environments it will match and the corresponding key is
          # the environment it will output if one of the values was found.  It is case insensitive.
          input_map: |
            { 
              "dev": ["dev", "d", "development"], 
              "qa": ["qa", "q"], 
              "stage": ["stg", "s", "stage"], 
              "demo": ["o", "demo"], 
              "uat": ["u", "uat"], 
              "prod": ["prod", "production", "p"] 
            }
          error_on_no_match: true
          custom_error_message: 'The environment must be Dev, QA, Stage Demo, UAT or Prod'

      - run: echo "The current environment is ${{ steps.clean-env.outputs.mapped_input }}"

      - name: Set RESOURCE_GROUP
        uses: im-open/set-variable-based-on-environment@v1.0.0
        id: rgrp
        with:
          variable-name: 'RESOURCE_GROUP'
          current-environment: ${{ steps.clean-env.outputs.mapped_input }}
          # TODO: For the following resource group inputs, fill in the value if you have the environment and delete the environment if it does not exist
          dev-value: ''
          qa-value: ''
          stage-value: ''
          demo-value: ''
          uat-value: ''
          prod-value: ''

      - uses: im-open/set-variable-based-on-environment@v1.0.0
        with:
          variable-name: 'APP_SERVICE_NAME'
          current-environment: ${{ steps.clean-env.outputs.mapped_input }}
          # TODO: For the following app service name inputs, fill in the value if you have the environment and delete the environment if it does not exist
          dev-value: ''
          qa-value: ''
          stage-value: ''
          demo-value: ''
          uat-value: ''
          prod-value: ''

      # TODO:  If this workflow is restarting a slot update these values, otherwise delete this section.
      # TODO:  If the slot has the same name in all environments, this can be converted into a single environment variable in the start-stop-restart job
      - uses: im-open/set-variable-based-on-environment@v1.0.0
        with:
          variable-name: 'SLOT_NAME'
          current-environment: ${{ steps.clean-env.outputs.mapped_input }}
          # TODO: For the following slot name inputs, fill in the value if you have the environment and delete the environment if it does not exist
          dev-value: ''
          qa-value: ''
          stage-value: ''
          demo-value: ''
          uat-value: ''
          prod-value: ''

  start-stop-restart:
    needs: [set-vars]
    runs-on: [self-hosted, ubuntu-20.04]
    environment: ${{ needs.set-vars.outputs.ENVIRONMENT }}

    env:
      ENVIRONMENT: ${{ needs.set-vars.outputs.ENVIRONMENT }}
      APP_SERVICE_NAME: ${{ needs.set-vars.outputs.APP_SERVICE_NAME }}
      RESOURCE_GROUP: ${{ needs.set-vars.outputs.RESOURCE_GROUP }}
      SLOT_NAME: ${{ needs.set-vars.outputs.SLOT_NAME }}

    steps:
      - run: echo "The current environment is ${{ env.ENVIRONMENT }}"

      - name: Clean action input
        id: clean-action
        uses: im-open/map-input-action@v1.0.1
        with:
          input: ${{ github.event.inputs.action }}
          input_map: '{ "start": ["start"], "stop": ["stop"], "restart": ["restart", "r"]}'
          error_on_no_match: true
          custom_error_message: 'The action must be start, stop or restart'

      - run: echo "'${{ steps.clean-action.outputs.mapped_input }}' will be peformed on ${{ env.ENVIRONMENT }} ${{ env.APP_SERVICE_NAME }}"

      - name: AZ Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # TODO: Ensure this secret has been populated in your repo

      # TODO:  if you wish to perform any of the following actions on a slot, append the following to each of the commands: --slot ${{ env.SLOT_NAME }}

      - name: start
        if: steps.clean-action.outputs.mapped_input == 'start'
        run: az webapp start --name ${{ env.APP_SERVICE_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: stop
        if: steps.clean-action.outputs.mapped_input == 'stop'
        run: az webapp stop --name ${{ env.APP_SERVICE_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: restart
        if: steps.clean-action.outputs.mapped_input == 'restart'
        run: az webapp restart --name ${{ env.APP_SERVICE_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Azure logout
        if: always() && steps.login.outcome == 'success'
        run: |
          az logout
          az cache purge
          az account clear
