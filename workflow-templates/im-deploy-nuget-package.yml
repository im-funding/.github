# Workflow Code: TrustingCockroach_v3    DO NOT REMOVE

name: 'Package Push Nuget Workflow'

# Note: This workflow has a couple of steps that can be used for determining the version:
# - use package.json value,
# - increment current git tag value,
# - or a workflow input
# Choose the appropriate strategy and delete the others.  If the version hasn't been incremented properly this action may fail if duplicate versions are detected.

on:
  # TODO:  Verify triggers
  pull_request:
    types: [closed]
  workflow_dispatch:
    inputs:
      version:
        description: 'The version for the new published package'

# TODO:  Make sure the .csproj file has been updated with the appropriate values required for GH Packages
# https://github.com/im-practices/git-er-done/blob/main/packages/publish-nuget.md

jobs:
  env:
    #CSPROJ_NAME: '' # TODO:  If you have an older project, add the name of your csproj file so it can be built with the nuget command directly.
    ORGANIZATION: '' # TODO:  Add the organization of the repo/package
    PKG_NAME: '' # TODO:  Add the name of the nuget package if pushing to artifactory

  publish-to-gpr:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main' # TODO:  Update if using a different trigger & verify name of default branch
    runs-on: [self-hosted, ubuntu-20.04]
    defaults:
      run:
        shell: bash
        working-directory: '' # TODO:  Add the path to the project that generates a nuget package

    steps:
      - uses: actions/checkout@v2

      # TODO:  If the project contains a local nuget.config remove it.  It interferes with restoring packages on the GitHub Action runners.

      # TODO:  If you are using any nuget/npm packages from GitHub Packages uncomment this step
      # - name: Authenticate with GitHub Packages
      #   uses: im-open/authenticate-with-gh-package-registries@v1.0.1
      #   with:
      #     read-pkg-token: ${{ secrets.READ_PKG_TOKEN }} # This is an org-level secret
      #     orgs: 'im-client,im-enrollment,im-practices' # TODO:  Verify list of orgs packages will be pulled from

      # TODO:  Uncomment if this workflow should increment the version.  Delete if a different workflow already incremented the version.
      # - name: Increment git tag and create release
      #   id: increment
      #   uses: im-open/git-version-lite@v1.0.0
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
      #     prefix: 'v' # TODO:  verify your prefix, the new ci workflows add v automatically.
      #     create-ref: 'true'

      # TODO:  Choose which pack to use.
      #  - The first pack relies on the version already being updated in the csproj.
      #  - The second pack will rely on one of the tag methods above being uncommented.
      #  - The third pack uses an input from a workflow_dispatch event.  This could be modified to use a payload from a repository_dispatch event as well.

      # - name: Pack with version in csproj
      #   run: dotnet pack --configuration Release

      # - name: Pack with version from git-version-lite
      #   run: dotnet pack --configuration Release -p:PackageVersion=${{ steps.increment.outputs.VERSION }}

      # - name: Pack with version input
      #   run: dotnet pack --configuration Release -p:PackageVersion=${{ github.event.inputs.version }}

      # TODO:  If this is an older project you may need to use the nuget command directly and add options as applicable.
      # - run: nuget pack ${{ env.CSPROJ_NAME }} -Build -Properties Configuration=Release;version="${{ env.TAG }}"

      # GITHUB_TOKEN is a special per-job token generated by GH for interacting with the repo
      # ARTIFACTORY_API_KEY is an org level secret
      - name: Push
        run: |
          nupkg=$(find . -type f -name "*.nupkg")
          dotnet nuget push "$nupkg" --source "https://nuget.pkg.github.com/${{ env.ORGANIZATION }}/index.json" --api-key ${{ secrets.GITHUB_TOKEN }}
          dotnet nuget push "$nupkg" --source "https://artifacts.mktp.io/artifactory/api/nuget/nuget-master/${{ env.PKG_NAME }}" --api-key ${{ secrets.ARTIFACTORY_API_KEY }}
