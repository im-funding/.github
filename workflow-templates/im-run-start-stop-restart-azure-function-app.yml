# Workflow Code: LazyPorpoise_v2    DO NOT REMOVE

# TODO: Ensure each of the repo-level and env-level secrets used in this workflow have been populated by an admin in your repository.

name: Runbook - Start, stop or restart azure function app

#TODO:  You may wish to add the name of the function app to the name above and the file name if there are multiple functions within the repository

on:
  workflow_dispatch:
    inputs:
      action:
        description: The action that should be taken - start|stop|restart.
        required: true
        default: restart
      environment:
        description: The environment the function is in - dev|qa|stage|prod|demo|uat # TODO:  Update for the environments that are available
        required: true
        default: prod

jobs:
  set-vars:
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners

    # To use any of these outputs in another job use the following syntax: ${{ needs.set-vars.outputs.RESOURCE_GROUP }}
    outputs:
      ENVIRONMENT: ${{ steps.clean-env.outputs.ENVIRONMENT }}
      RESOURCE_GROUP: ${{ steps.set-variables.outputs.RESOURCE_GROUP }}
      FUNCTION_APP_NAME: ${{ steps.set-variables.outputs.FUNCTION_APP_NAME }}
      SLOT_NAME: ${{ steps.set-variables.outputs.SLOT_NAME }}

    steps:
      - name: Set ENVIRONMENT
        id: clean-env
        uses: im-open/set-environment-variables-by-scope@v1.0.2
        with:
          scope: ${{ github.event.inputs.environment }}
          create-output-variables: true
          error-on-no-match: true
          custom-error-message: 'The environment must be Dev, QA, Stage Demo, UAT or Prod' # TODO:  Update for the environments that are available
        env:
          # TODO:  Update for the environments your project contains
          # The value array contains the environments it will match and the corresponding key is
          # the environment it will output if one of the values was found.  It is case insensitive.
          ENVIRONMENT@dev d development: 'dev'
          ENVIRONMENT@qa q: 'qa'
          ENVIRONMENT@stg s stage: 'stage'
          ENVIRONMENT@o demo: 'demo'
          ENVIRONMENT@u uat: 'uat'
          ENVIRONMENT@prod p production: 'prod'

      - run: echo "The current environment is ${{ steps.clean-env.outputs.ENVIRONMENT }}"

      - name: Set Variables
        id: set-variables
        uses: im-open/set-environment-variables-by-scope@v1.0.2
        with:
          scope: ${{ steps.clean-env.outputs.ENVIRONMENT }}
          create-output-variables: true
        env:
          # TODO: For the following resource group inputs, fill in the value if you have the environment and delete the environment if it does not exist
          RESOURCE_GROUP@dev: ''
          RESOURCE_GROUP@qa: ''
          RESOURCE_GROUP@stage: ''
          RESOURCE_GROUP@demo: ''
          RESOURCE_GROUP@uat: ''
          RESOURCE_GROUP@prod: ''
          # TODO: For the following function app name inputs, fill in the value if you have the environment and delete the environment if it does not exist
          FUNCTION_APP_NAME@dev: ''
          FUNCTION_APP_NAME@qa: ''
          FUNCTION_APP_NAME@stage: ''
          FUNCTION_APP_NAME@demo: ''
          FUNCTION_APP_NAME@uat: ''
          FUNCTION_APP_NAME@prod: ''
          # TODO:  If this workflow is restarting a slot update these values, otherwise delete this section
          # TODO:  If the slot has the same name in all environments, this can be converted into a single environment variable in the start-stop-restart job
          #        SLOT_NAME@dev qa stage demo uat prod: ''
          SLOT_NAME@dev: ''
          SLOT_NAME@qa: ''
          SLOT_NAME@stage: ''
          SLOT_NAME@demo: ''
          SLOT_NAME@uat: ''
          SLOT_NAME@prod: ''

  start-stop-restart:
    needs: [set-vars]
    runs-on: [self-hosted, ubuntu-20.04]
    environment: ${{ needs.set-vars.outputs.ENVIRONMENT }}

    env:
      ENVIRONMENT: ${{ needs.set-vars.outputs.ENVIRONMENT }}
      FUNCTION_APP_NAME: ${{ needs.set-vars.outputs.FUNCTION_APP_NAME }}
      RESOURCE_GROUP: ${{ needs.set-vars.outputs.RESOURCE_GROUP }}
      SLOT_NAME: ${{ needs.set-vars.outputs.SLOT_NAME }}

    steps:
      - run: echo "The current environment is ${{ env.ENVIRONMENT }}"

      - name: Clean action input
        id: clean-action
        uses: im-open/set-environment-variables-by-scope@v1.0.2
        with:
          scope: ${{ github.event.inputs.action }}
          error-on-no-match: true
          custom-error-message: 'The action must be start, stop or restart'
        env:
          ENVIRONMENT@start t: 'start'
          ENVIRONMENT@stop p: 'stop'
          ENVIRONMENT@restart r: 'restart'

      - run: echo "'${{ steps.clean-action.outputs.ENVIRONMENT }}' will be peformed on ${{ env.ENVIRONMENT }} ${{ env.FUNCTION_APP_NAME }}"

      - name: AZ Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # This is an env-level secret

      # TODO:  if you wish to perform any of the following actions on a slot, append the following to each of the commands: --slot ${{ env.SLOT_NAME }}

      - name: start
        if: steps.clean-action.outputs.ENVIRONMENT == 'start'
        # ARM_SUBSCRIPTION_ID is an env-level secret
        run: az functionapp start --name ${{ env.FUNCTION_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: stop
        if: steps.clean-action.outputs.ENVIRONMENT == 'stop'
        # ARM_SUBSCRIPTION_ID is an env-level secret
        run: az functionapp stop --name ${{ env.FUNCTION_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: restart
        if: steps.clean-action.outputs.ENVIRONMENT == 'restart'
        # ARM_SUBSCRIPTION_ID is an env-level secret
        run: az functionapp restart --name ${{ env.FUNCTION_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Azure logout
        if: always() && steps.login.outcome == 'success'
        run: |
          az logout
          az cache purge
          az account clear
