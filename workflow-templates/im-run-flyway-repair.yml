# Workflow Code: SpiritedGnat_v8    DO NOT REMOVE
# Purpose:
#    Runs a flyway repair command against an Azure SQL or
#    On-Prem Database when someone kicks it off manually.
#
# Frequency:
#    - This workflow can be duplicated once per database in the repository.
#
# Projects to use this Template with:
#    - Azure Sql Database (Optional Template)
#    - On-Prem Database   (Optional Template)
#
# TODO: Prerequisites:
#    - Ensure each of the repo-level and env-level secrets used in this workflow have been populated by an admin in your repository.

name: Runbook - Flyway Repair

on:
  workflow_dispatch:
    inputs:
      environment:
        description: The environment the database is in
        required: true
        default: dev
        type: choice
        options: # TODO: Update for the environments that are available
          - dev
          - qa
          - stage
          - demo
          - uat
          - prod
      branch-tag-sha:
        description: The branch, tag or sha of the flyway scripts that should be repaired.
        required: true

env:
  ENVIRONMENT: ${{ github.event.inputs.environment }}
  GITHUB_REF: ${{ github.event.inputs.branch-tag-sha }}
  DB_SERVER_PORT: '1433' # TODO: Verify that this is correct
  MIGRATIONS_HISTORY_TABLE: 'MigrationHistory' # TODO: Verify this table name
  PATH_TO_MIGRATION_FILES: '' # TODO: Add the path to the migrations folder

jobs:
  repair-database-migrations:
    runs-on: [self-hosted, ubuntu-20.04]
    environment: ${{ github.event.inputs.environment }} # Use inputs context because env context is not available to environment:
    steps:
      - run: echo "The current environment is ${{ env.ENVIRONMENT }}."

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          ref: ${{ env.GITHUB_REF }}

      # TODO: If not acting on an azure database, remove this
      - name: AZ Login
        id: login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # This is an env-level secret

      # TODO: Use this for any variables that change per environment
      - name: Set Database Vars
        id: db-vars
        uses: im-open/set-environment-variables-by-scope@v1.0.4
        with:
          scope: ${{ env.ENVIRONMENT }}
          create-output-variables: true
          input-file: '' # TODO: if you have an input file with your variable substitutions, add them here
        env:
          DB_NAME@dev: ''
          DB_NAME@qa: ''
          DB_NAME@stage demo: ''
          DB_NAME@prod: ''
          DB_SERVER_NAME@dev: ''
          DB_SERVER_NAME@qa: ''
          DB_SERVER_NAME@stage demo: ''
          DB_SERVER_NAME@prod: ''
          AZURE_KEY_VAULT@dev: ''
          AZURE_KEY_VAULT@qa: ''
          AZURE_KEY_VAULT@stage demo: ''
          AZURE_KEY_VAULT@prod: ''

      # Get the Azure SQL Creds from Key Vault
      - name: Get Azure SQL Credentials
        run: |
          sqlUser=$(az keyvault secret show --vault-name "${{ steps.db-vars.outputs.AZURE_KEY_VAULT }}" --name "sqluser" --query value)
          sqlPassword=$(az keyvault secret show --vault-name "${{ steps.db-vars.outputs.AZURE_KEY_VAULT }}" --name "sqlpassword" --query value)
          echo "::add-mask::$sqlPassword"
          # trim quotes added by az keyvault command
          sqlUser=$(sed -e 's/^"//' -e 's/"$//' <<<"$sqlUser")
          sqlPassword=$(sed -e 's/^"//' -e 's/"$//' <<<"$sqlPassword")
          echo "SQL_USER=$sqlUser" >> $GITHUB_ENV
          echo "SQL_PASSWORD=$sqlPassword" >> $GITHUB_ENV

      - name: Install Flyway
        uses: im-open/setup-flyway@v1.0.2
        with:
          version: 7.9.2

      - name: Flyway repair
        uses: im-open/run-flyway-command@v1.2.1
        with:
          flyway-command: 'repair'
          db-server-name: ${{ steps.db-vars.outputs.DB_SERVER_NAME }}
          db-server-port: ${{ env.DB_SERVER_PORT }}
          db-name: ${{ steps.db-vars.outputs.DB_NAME }}
          migration-history-table: ${{ env.MIGRATIONS_HISTORY_TABLE }}
          migration-files-path: ${{ env.PATH_TO_MIGRATION_FILES }}
          use-integrated-security: false
          username: '${{ env.SQL_USER }}'
          password: '${{ env.SQL_PASSWORD }}'

      # TODO: If not acting on an azure database, remove this
      - name: Azure logout
        if: always() && steps.login.outcome == 'success'
        run: |
          az logout
          az cache purge
          az account clear
