# Workflow Code: SpiritedGnat_v5    DO NOT REMOVE

# TODO: Ensure each of the repo-level and env-level secrets used in this workflow have been populated by an admin in your repository.

name: Runbook - Flyway Repair

on:
  workflow_dispatch:
    inputs:
      environment:
        description: The environment the database is in - dev|qa|stage|prod|demo|uat # TODO:  Update for the environments that are available
        required: true
        default: dev
      branch-tag-sha:
        description: The branch, tag or sha of the flyway scripts that should be repaired.
        required: true

env:
  GITHUB_REF: ${{ github.event.inputs.branch-tag-sha }}
  DB_SERVER_PORT: '1433' # TODO: Verify that this is correct
  MIGRATIONS_HISTORY_TABLE: 'MigrationHistory' # TODO: Verify this table name
  PATH_TO_MIGRATION_FILES: '' # TODO: Add the path to the migrations folder

jobs:
  set-vars:
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners

    # To use any of these outputs in another job use the following syntax: ${{ needs.set-vars.outputs.ENVIRONMENT }}
    outputs:
      ENVIRONMENT: ${{ steps.clean-env.outputs.ENVIRONMENT }}

    steps:
      # To use this value: ${{ needs.set-vars.outputs.ENVIRONMENT }}
      - name: Set ENVIRONMENT
        id: clean-env
        uses: im-open/set-environment-variables-by-scope@v1.0.3
        with:
          scope: ${{ github.event.inputs.environment }}
          create-output-variables: true
          error-on-no-match: true
          custom-error-message: 'The environment must be Dev, QA, Stage Demo, UAT or Prod' # TODO:  Update for the environments that are available
        env:
          # TODO:  Update for the environments your project contains
          # The value array contains the environments it will match and the corresponding key is
          # the environment it will output if one of the values was found.  It is case insensitive.
          ENVIRONMENT@dev d development: 'dev'
          ENVIRONMENT@qa q: 'qa'
          ENVIRONMENT@stg s stage: 'stage'
          ENVIRONMENT@o demo: 'demo'
          ENVIRONMENT@u uat: 'uat'
          ENVIRONMENT@prod p production: 'prod'

      - run: echo "The current environment is ${{ steps.clean-env.outputs.ENVIRONMENT }}."

  repair-database-migrations:
    runs-on: [self-hosted, ubuntu-20.04]
    environment: ${{ needs.set-vars.outputs.ENVIRONMENT }}
    needs: [set-vars]
    steps:
      - run: echo "The current environment is ${{ needs.set-vars.outputs.ENVIRONMENT }}."

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          ref: ${{ env.GITHUB_REF }}

      # TODO: If not acting on an azure database, remove this
      - name: AZ Login
        id: login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # This is an env-level secret

      # TODO: Use this for any variables that change per environment
      - name: Set Database Vars
        id: db-vars
        uses: im-open/set-environment-variables-by-scope@v1.0.3
        with:
          scope: ${{ needs.set-vars.outputs.ENVIRONMENT }}
          create-output-variables: true
          input-file: '' # TODO:  if you have an input file with your variable substitutions, add them here
        env:
          DB_NAME@dev: ''
          DB_NAME@qa: ''
          DB_NAME@stage demo: ''
          DB_NAME@prod: ''
          DB_SERVER_NAME@dev: ''
          DB_SERVER_NAME@qa: ''
          DB_SERVER_NAME@stage demo: ''
          DB_SERVER_NAME@prod: ''
          AZURE_KEY_VAULT@dev: ''
          AZURE_KEY_VAULT@qa: ''
          AZURE_KEY_VAULT@stage demo: ''
          AZURE_KEY_VAULT@prod: ''

      # Get the Azure SQL Creds from Key Vault
      - name: Get Azure SQL Credentials
        run: |
          sqlUser=$(az keyvault secret show --vault-name "${{ steps.db-vars.outputs.AZURE_KEY_VAULT }}" --name "sqluser" --query value)
          sqlPassword=$(az keyvault secret show --vault-name "${{ steps.db-vars.outputs.AZURE_KEY_VAULT }}" --name "sqlpassword" --query value)
          echo "::add-mask::$sqlPassword"
          # trim quotes added by az keyvault command
          sqlUser=$(sed -e 's/^"//' -e 's/"$//' <<<"$sqlUser")
          sqlPassword=$(sed -e 's/^"//' -e 's/"$//' <<<"$sqlPassword")
          echo "SQL_USER=$sqlUser" >> $GITHUB_ENV
          echo "SQL_PASSWORD=$sqlPassword" >> $GITHUB_ENV

      - name: Install Flyway
        uses: im-open/setup-flyway@v1.0.1
        with:
          version: 7.9.2

      - name: Flyway repair
        uses: im-open/run-flyway-command@v1.2.0
        with:
          flyway-command: 'repair'
          db-server-name: ${{ steps.db-vars.outputs.DB_SERVER_NAME }}
          db-server-port: ${{ env.DB_SERVER_PORT }}
          db-name: ${{ steps.db-vars.outputs.DB_NAME }}
          migration-history-table: ${{ env.MIGRATIONS_HISTORY_TABLE }}
          migration-files-path: ${{ env.PATH_TO_MIGRATION_FILES }}
          use-integrated-security: false
          username: '${{ env.SQL_USER }}'
          password: '${{ env.SQL_PASSWORD }}'

      # TODO: If not acting on an azure database, remove this
      - name: Azure logout
        if: always() && steps.login.outcome == 'success'
        run: |
          az logout
          az cache purge
          az account clear
