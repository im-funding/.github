# Workflow Code: EmpatheticDolphin_v4    DO NOT REMOVE

# TODO: Ensure each of the repo-level and env-level secrets used in this workflow have been populated by an admin in your repository.

name: Runbook - Annotate App Insights

on:
  workflow_dispatch:
    inputs:
      environment:
        description: The environment the service is in - dev|qa|stage|prod|demo|uat # TODO:  Update for the environments that are available
        required: true
        default: prod
      category:
        description: The category of the annotation
        required: false
        default: 'Deployment'
      eventName:
        description: The name of the release/tag that will be deployed or the event that will be annotated.  If there are multiple deployables in the repo you should include the project it is for.
        required: true
      customMetadata:
        description: 'The comma separated custom metadata pairs.  Format: name1=value1,name2=value2'
        required: false
        default: ''

jobs:
  set-vars:
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners

    # To use any of these outputs in another job use the following syntax: ${{ needs.set-vars.outputs.RESOURCE_GROUP }}
    outputs:
      ENVIRONMENT: ${{ steps.clean-env.outputs.mapped_input }}
      RESOURCE_GROUP: ${{ steps.rgrp.outputs.RESOURCE_GROUP }}
      APP_INSIGHTS_NAME: ${{ steps.insights.outputs.APP_INSIGHTS_NAME }}

    steps:
      # To use this value: ${{ needs.set-vars.outputs.ENVIRONMENT }}
      - name: Set ENVIRONMENT
        id: clean-env
        uses: im-open/map-input-action@v1.0.1
        with:
          input: ${{ github.event.inputs.environment }}
          # TODO:  Update for the environments your project contains
          # The value array contains the environments it will match and the corresponding key is
          # the environment it will output if one of the values was found.  It is case insensitive.
          input_map: |
            { 
              "dev": ["dev", "d", "development"], 
              "qa": ["qa", "q"], 
              "stage": ["stg", "s", "stage"], 
              "demo": ["o", "demo"], 
              "uat": ["u", "uat"], 
              "prod": ["prod", "production", "p"] 
            }
          error_on_no_match: true
          custom_error_message: 'The environment must be Dev, QA, Stage Demo, UAT or Prod' # TODO:  Update for the environments that are available

      - run: echo "The current environment is ${{ steps.clean-env.outputs.mapped_input }}.  The event is ${{ github.event.inputs.eventName }}"

      # This variable is used to upload and download blobs from blob storage
      - name: Set RESOURCE_GROUP
        uses: im-open/set-variable-based-on-environment@v1.0.0
        id: rgrp
        with:
          variable-name: 'RESOURCE_GROUP'
          current-environment: ${{ steps.clean-env.outputs.mapped_input }}
          # TODO: For the following resource group inputs, fill in the value if you have the environment and delete the environment if it does not exist
          dev-value: ''
          qa-value: ''
          stage-value: ''
          demo-value: ''
          uat-value: ''
          prod-value: ''

      - name: Set APP_INSIGHTS_NAME
        uses: im-open/set-variable-based-on-environment@v1.0.0
        id: insights
        with:
          variable-name: 'APP_INSIGHTS_NAME'
          current-environment: ${{ steps.clean-env.outputs.mapped_input }}
          # TODO: For the following app insights name inputs, fill in the value if you have the environment and delete the environment if it does not exist
          dev-value: ''
          qa-value: ''
          stage-value: ''
          demo-value: ''
          uat-value: ''
          prod-value: ''

  create-annotatation:
    runs-on: [self-hosted, ubuntu-20.04]
    environment: ${{ needs.set-vars.outputs.ENVIRONMENT }}
    needs: [set-vars]
    steps:
      - run: echo "The current environment is ${{ needs.set-vars.outputs.ENVIRONMENT }}.  The event is ${{ github.event.inputs.eventName }}"

      - name: AZ Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # This is an env-level secret

      - name: annotate
        uses: im-open/create-app-insights-annotation@v1.0.0
        with:
          subscriptionId: ${{ secrets.ARM_SUBSCRIPTION_ID }} # This is an env-level secret
          resourceGroupName: ${{ needs.set-vars.outputs.RESOURCE_GROUP }}
          appInsightsResourceName: '${{ needs.set-vars.outputs.APP_INSIGHTS_NAME }}'
          releaseName: ${{ github.event.inputs.eventName }}
          category: ${{ github.event.inputs.category }}
          customMetadata: ${{ github.event.inputs.customMetadata }}

      - name: Azure logout
        if: always() && steps.login.outcome == 'success'
        run: |
          az logout
          az cache purge
          az account clear
