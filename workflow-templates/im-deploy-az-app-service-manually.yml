# Workflow Code: AmbitiousLizard_v3    DO NOT REMOVE

# Prerequisites
# 1 - Make sure the az secrets have been added to the environment
# 2 - Make sure the scm restrictions include the prod github runners (previously it had just octopus)

# TODO: Ensure each of the repo-level and env-level secrets used in this workflow have been populated by an admin in your repository.
# TODO: Set up a deployment board if it does not already exist: https://github.com/im-practices/git-er-done/blob/main/actions/deployment-board.md

name: Manually deploy AZ App Service
on:
  workflow_dispatch:
    inputs:
      tag:
        description: The repository tag pointing to the code that should be deployed.  For Production, only tags reachable by the default branch will be accepted.
        required: true
      environment:
        description: The environment to deploy to - dev|qa|stage|prod|demo|uat
        required: true

env:
  GITHUB_REF: ${{ github.event.inputs.tag  }} # This is the tag that we'll be deploying

jobs:
  set-vars:
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners

    outputs:
      ENVIRONMENT: ${{ steps.clean-env.outputs.mapped_input }} # To use this value: ${{ needs.set-vars.outputs.ENVIRONMENT }}
      RESOURCE_GROUP: ${{ steps.rgrp.outputs.RESOURCE_GROUP }} # To use this value: ${{ needs.set-vars.outputs.RESOURCE_GROUP }}
      AZ_APP_NAME: ${{ steps.app-name.outputs.AZ_APP_NAME }} # To use this value: ${{ needs.set-vars.outputs.AZ_APP_NAME }}
      AZ_INSIGHTS_NAME: ${{ steps.insights.outputs.AZ_INSIGHTS_NAME }} # To use this value: ${{ needs.set-vars.outputs.AZ_INSIGHTS_NAME }}

    steps:
      - name: Set ENVIRONMENT
        id: clean-env
        uses: im-open/map-input-action@v1.0.1
        with:
          input: ${{ github.event.inputs.environment }}
          # TODO:  Update for the environments your project contains
          # The value array contains the environments it will match and the corresponding key is
          # the environment it will output if one of the values was found.  It is case insensitive.
          input_map: |
            { 
              "dev": ["dev", "d", "development"], 
              "qa": ["qa", "q"], 
              "stage": ["stg", "s", "stage"], 
              "demo": ["o", "demo"], 
              "uat": ["u", "uat"], 
              "prod": ["prod", "production", "p"] 
            }
          error_on_no_match: true
          custom_error_message: 'The environment must be Dev, QA, Stage Demo, UAT or Prod'

      - run: echo "The current environment is ${{ steps.clean-env.outputs.mapped_input }}"

      # This variable is used to swap slots and annotate app insights
      - name: Set RESOURCE_GROUP
        id: rgrp
        uses: im-open/set-variable-based-on-environment@v1.0.0
        with:
          variable-name: 'RESOURCE_GROUP'
          current-environment: ${{ steps.clean-env.outputs.mapped_input }}
          # TODO: For the following resource group inputs, fill in the value if you have the environment and delete the environment if it does not exist
          dev-value: ''
          qa-value: ''
          stage-value: ''
          demo-value: ''
          uat-value: ''
          prod-value: ''

      # This variable is used to deploy the app, swap slots, annotate app insights and send a teams notification
      - name: Set AZ_APP_NAME
        id: app-name
        uses: im-open/set-variable-based-on-environment@v1.0.0
        with:
          variable-name: 'AZ_APP_NAME'
          current-environment: ${{ steps.clean-env.outputs.mapped_input }}
          # TODO: For the following azure app name inputs, fill in the value if you have the environment and delete the environment if it does not exist
          dev-value: ''
          qa-value: ''
          stage-value: ''
          demo-value: ''
          uat-value: ''
          prod-value: ''

      # This variable is used to annotate app insights
      - name: Set AZ_INSIGHTS_NAME
        id: insights
        uses: im-open/set-variable-based-on-environment@v1.0.0
        with:
          variable-name: 'AZ_INSIGHTS_NAME'
          current-environment: ${{ steps.clean-env.outputs.mapped_input }}
          # TODO: For the following azure insights name inputs, fill in the value if you have the environment and delete the environment if it does not exist
          dev-value: ''
          qa-value: ''
          stage-value: ''
          demo-value: ''
          uat-value: ''
          prod-value: ''

  # Each env has their own stakeholder approval environment.  If no required reviewers are set for
  # that environment, the workflow will continue without requiring anyone to approve the deployment.
  stakeholder-approval:
    needs: [set-vars]
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    environment: '${{ needs.set-vars.outputs.ENVIRONMENT }} Stakeholder Approval'
    steps:
      - run: echo "The current environment is ${{ needs.set-vars.outputs.ENVIRONMENT }}"

      - name: Approval Received
        run: echo "Stakeholder approval was received"

  # This job needs to run for all environments because tf-plan relies
  # on it but the steps inside this job will only run for the Prod env.
  validate-tag-for-prod-deploys:
    needs: [set-vars, stakeholder-approval]
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    steps:
      - run: echo "The current environment is ${{ needs.set-vars.outputs.ENVIRONMENT }}"

      # In this job, always checkout the default branch (not the tag that was provided as an input).  Also use
      # fetch-depth: 0 to retrieve the history and tags so we can check if a tag is reachable from the default branch.
      - name: Checkout Repository
        if: needs.set-vars.outputs.ENVIRONMENT == 'prod'
        uses: actions/checkout@v2
        with:
          ref: 'main' # TODO: verify the name of your default branch
          fetch-depth: 0

      - uses: im-open/is-tag-reachable-from-default-branch@v1.0.0
        if: needs.set-vars.outputs.ENVIRONMENT == 'prod'
        with:
          tag: ${{ env.GITHUB_REF }}

  deploy-code:
    needs: [set-vars, validate-tag-for-prod-deploys]
    runs-on: [self-hosted, ubuntu-20.04]
    environment: ${{ needs.set-vars.outputs.ENVIRONMENT }}

    env:
      PAGERDUTY_WINDOW_IN_MIN: 30 # TODO:  Verify the length of your PD Maintenance Window.  This is typically set at 30 min in Octopus
      PAGERDUTY_WINDOW_DESC: 'Deploying Code to ${{ needs.set-vars.outputs.ENVIRONMENT }} from GitHub Actions' # TODO:  Verify this PD Maintenance Window Description
      AZ_SLOT_NAME: '' # TODO:  If using slots, set this to the name of the azure deployment slot.  If this differs per environment, add a new section in the set-vars job above where the value can be set per environment
      TARGET_SLOT: 'Production' # TODO:  Verify that this is correct.  This is the name azure uses by default.  If you are using a different slot for your main site, update it here
      ASSET_ZIP: 'published_app.zip' # TODO: Verify that this wasn't changed in the CI build.  This is the value in that workflow by default.
      UNZIPPED_ASSET: 'published_app'
      DEPLOY_ZIP: 'deploy.zip'

    steps:
      - run: echo "The current environment is ${{ needs.set-vars.outputs.ENVIRONMENT }}"

      - name: Open a PagerDuty Maintenance Window
        id: open-window
        uses: im-open/open-pagerduty-maintenance-window@v1.0.1
        with:
          pagerduty-api-key: ${{ secrets.PAGERDUTY_API_KEY }} # This is an org-level secret
          description: '${{ env.PAGERDUTY_WINDOW_DESC }}'
          minutes: ${{ env.PAGERDUTY_WINDOW_IN_MIN }}
          service-id: ${{ secrets.PAGERDUTY_SERVICE_ID }} # This is an env-level secret

      - name: Download artifacts from release
        uses: im-open/download-release-asset@v1.0.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
          asset-name: ${{ env.ASSET_ZIP }}
          tag-name: ${{ github.event.inputs.tag }}

      - name: Unzip release asset
        run: unzip -qq ${{ env.ASSET_ZIP }} -d ./${{ env.UNZIPPED_ASSET }}

      # TODO:  If you need to do replacements in your appsettings.json file you can do it two ways.
      # 1- Repeat this add-or-update-json-properties action for each environment, and add an 'if: needs.set-vars.outputs.ENVIRONMENT == ""' condition with the appropriate env to each action.
      # 2- In the set-vars job, add one set-variable-based-on-environment action block per variable then use that variable in the single add-or-update-json-properties action below.
      # - name: Update appsettings.json with Environment Specific Values
      #   uses: im-open/add-or-update-json-properties@v1.0.1
      #   with:
      #     path-to-json-file: '${{ env.UNZIPPED_ASSET }}/appsettings.json'
      #     properties-to-update-or-add: |
      #       [
      #         {"SecretName": "SecretValue"},
      #         {"Nested.Secret.Name": "SecretValue"},
      #         {"": ""}
      #       ]

      # TODO:  If you need to do any Octopus variable substitution (i.e. replacing #{OCTO_PLACEHOLDER} in files) use the following action.  Must be done once per file.
      - uses: im-open/octostache-action@v1.0.0
        with:
          variablesFile: '' # TODO: Add the ./path/file containing the variable substitutions to make, you will need to create this file  See the action for more details.
          templateFile: '' # TODO:  Add the ./path/file to make the substitutions in
          outputFile: '' # TODO:  Add the ./path/file to save the substitutions in (generally the same as templateFile above)

      # TODO:  If you are using any nuget/npm packages from GitHub Packages uncomment this step
      # TODO:  If the project contains a local nuget.config, this action will not work properly.  Either:
      #        - Remove the file and use this action or
      #        - Delete this action and modify the file so it has the appropriate org entries in nuget.config. https://github.com/im-practices/git-er-done/blob/main/packages/connect-nuget.md#script-output
      # - name: Authenticate with GitHub Packages
      #   uses: im-open/authenticate-with-gh-package-registries@v1.0.1
      #   with:
      #     read-pkg-token: ${{ secrets.READ_PKG_TOKEN }} # This is an org-level secret
      #     orgs: '' # TODO:  Add a csv list of organizations that npm/nuget packages will be pulled from like 'im-enrollment,im-client'

      - name: Zip the published app for faster deployment and uploads
        working-directory: ${{ env.UNZIPPED_ASSET }}
        run: zip -r ../${{ env.DEPLOY_ZIP }} .

      - name: AZ Login
        id: login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # This is an env-level secret

      # TODO:  Uncomment if you want to create a slot to deploy to.  Delete if you have a permanent slot or do not wish to use slots.
      # ARM_SUBSCRIPTION_ID is an env-level secret
      # - name: Create a deployment slot
      #   run: |
      #     az webapp deployment slot create \
      #     --name ${{ needs.set-vars.outputs.AZ_APP_NAME }}  \
      #     --slot ${{ env.AZ_SLOT_NAME }} \
      #     --resource-group ${{ needs.set-vars.outputs.RESOURCE_GROUP }} \
      #     --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }} \
      #     --configuration-source ${{ needs.set-vars.outputs.AZ_APP_NAME }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.set-vars.outputs.AZ_APP_NAME }}
          package: ./${{ env.DEPLOY_ZIP }}
          # slot-name: ${{ env.AZ_SLOT_NAME }}  # TODO:  Uncomment if using slots, delete if not

      # TODO:  Uncomment if using slots and you want to swap them now (as opposed to doing it in another workflow).  Delete this block if you don't.
      # ARM_SUBSCRIPTION_ID is an env-level secret
      # - name: Swap slots
      #   run: |
      #     az webapp deployment slot swap \
      #     --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }} \
      #     --resource-group ${{ needs.set-vars.outputs.RESOURCE_GROUP }} \
      #     --name ${{ needs.set-vars.outputs.AZ_APP_NAME }}  \
      #     --slot ${{ env.AZ_SLOT_NAME }} \
      #     --target-slot ${{ env.TARGET_SLOT }}

      # TODO:  Uncomment if you want to delete the slot.  Delete this block if you don't.
      # ARM_SUBSCRIPTION_ID is an env-level secret
      # - run: |
      #     az webapp deployment slot delete \
      #     --slot ${{ env.AZ_SLOT_NAME }} \
      #     --name ${{ needs.set-vars.outputs.AZ_APP_NAME }}  \
      #     --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }} \
      #     --resource-group ${{ needs.set-vars.outputs.RESOURCE_GROUP }}

      # TODO: Delete the following step if not using app insights
      - name: Annotate App Insights
        uses: im-open/create-app-insights-annotation@v1.0.0
        with:
          subscriptionId: ${{ secrets.ARM_SUBSCRIPTION_ID }} # This is an env-level secret
          resourceGroupName: ${{ needs.set-vars.outputs.RESOURCE_GROUP }}
          appInsightsResourceName: '${{ needs.set-vars.outputs.AZ_INSIGHTS_NAME }}'
          releaseName: ${{ env.GITHUB_REF }} # TODO:  Verify release name (this will be the tag that the user input)
          category: 'Deployment'
          customMetadata: 'ProjectName=${{ needs.set-vars.outputs.AZ_APP_NAME }},DeployedBy=${{ github.actor }},RunID=${{ github.run_id }}'

      - name: Azure logout
        if: always() && steps.login.outcome == 'success'
        run: |
          az logout
          az cache purge
          az account clear

      - name: Close the PagerDuty Maintenance Window
        if: always() && steps.open-window.outcome == 'success'
        uses: im-open/close-pagerduty-maintenance-window@v1.0.0
        with:
          pagerduty-api-key: ${{ secrets.PAGERDUTY_API_KEY }} # This is an org-level secret
          maintenance-window-id: ${{ steps.open-window.outputs.maintenance-window-id }}

      - name: Delete .zips and folder that contains sensitive info
        continue-on-error: true
        run: |
          rm -f ${{ env.ASSET_ZIP }}
          rm -f ${{ env.DEPLOY_ZIP }}
          rm -rf ${{ env.UNZIPPED_ASSET }}

      # TODO:  Uncomment if you have a separate workflow for swapping slots and you want to trigger it now.  Delete if you don't.
      # - name: Trigger the Slot Swap
      #   uses: actions/github-script@v4
      #   with:
      #     github-token: ${{ secrets.PIPELINE_BOT_PAT }} # This is an org-level secret #TODO:  make sure im-pipeline-bot has at least write access to your repo
      #     script: |
      #       github.repos.createDispatchEvent({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         event_type: "swap_slots", # TODO:  verify the other workflow has a repository_dispatch event that accepts the swap_slots type.
      #         client_payload: {
      #           environment: "${{ needs.set-vars.outputs.ENVIRONMENT }}"
      #         }
      #       });

  update-deployment-board-and-send-teams-notification:
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    needs: [set-vars, deploy-code]
    if: always()
    steps:
      - run: echo "The current environment is ${{ needs.set-vars.outputs.ENVIRONMENT }}"

      - uses: im-open/workflow-conclusion@v1.0.2
        id: conclusion
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo

      # https://github.com/im-practices/git-er-done/blob/main/actions/deployment-board.md
      - name: Update Deployment Board
        if: always()
        uses: im-open/update-deployment-board@v1.0.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
          environment: ${{ needs.set-vars.outputs.ENVIRONMENT }}
          board-number: '' # TODO: Add the automated deployment board number or remove if not using an automated deployment project board.
          ref: ${{ env.GITHUB_REF }}
          deploy-status: ${{ steps.conclusion.outputs.workflow_conclusion }}
          timezone: 'america/denver'

      - name: Send Status to Teams
        if: always()
        uses: im-open/post-status-to-teams-action@v1.0.0
        with:
          title: Deploying ${{ needs.set-vars.outputs.AZ_APP_NAME }} to Azure # TODO:  Verify title
          workflow-status: ${{ steps.conclusion.outputs.workflow_conclusion }}
          workflow-type: Deploy
          teams-uri: ${{ secrets.MS_TEAMS_URI }} # This is a repo-level secret (unless 'environment:' has been added to this job)
          timezone: America/Denver # TODO:  Verify timezone
          # TODO:  Verify the custom facts you want included
          custom-facts: |
            [
              { "name": "Event", "value": "${{ github.event_name }}" },
              { "name": "Workflow", "value": "${{ github.workflow }}" },
              { "name": "Run", "value": "${{ github.run_id }}" },
              { "name": "Actor", "value": "${{ github.actor }}" }
            ]
          # TODO:  Verify additional buttons you want included.  A View Build Log is included by default.  If no additional actions are needed, delete this arg.
          custom-actions: |
            [
              { "name": "", "uri": "" }
            ]
